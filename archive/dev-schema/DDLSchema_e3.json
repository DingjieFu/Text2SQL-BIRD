{
  "california_schools": "CREATE TABLE frpm\n(\n    CDSCode                                       TEXT not null\n        primary key,\n    `Academic Year`                               TEXT  null,\n    `County Code`                                 TEXT  null,\n    `District Code`                               INTEGER         null,\n    `School Code`                                 TEXT  null,\n    `County Name`                                 TEXT null,\n    `District Name`                               TEXT null,\n    `School Name`                                 TEXT null,\n    `District Type`                               TEXT null,\n    `School Type`                                 TEXT null,\n    `Educational Option Type`                     TEXT null,\n    `NSLP Provision Status`                       TEXT null,\n    `Charter School (Y/N)`                        INTEGER    null,\n    `Charter School Number`                       TEXT  null,\n    `Charter Funding Type`                        TEXT null,\n    IRC                                           INTEGER    null,\n    `Low Grade`                                   TEXT  null,\n    `High Grade`                                  TEXT null,\n    `Enrollment (K-12)`                           REAL      null,\n    `Free Meal Count (K-12)`                      REAL       null,\n    `Percent (%) Eligible Free (K-12)`            REAL       null,\n    `FRPM Count (K-12)`                           REAL       null,\n    `Percent (%) Eligible FRPM (K-12)`            REAL       null,\n    `Enrollment (Ages 5-17)`                      REAL       null,\n    `Free Meal Count (Ages 5-17)`                 REAL       null,\n    `Percent (%) Eligible Free (Ages 5-17)`       REAL       null,\n    `FRPM Count (Ages 5-17)`                      REAL       null,\n    `Percent (%) Eligible FRPM (Ages 5-17)`       REAL       null,\n    `2013-14 CALPADS Fall 1 Certification Status` INTEGER    null,\n    foreign key (CDSCode) references schools (CDSCode)\n) \n /* \n 3 example rows: \n SELECT * FROM frpm LIMIT 3; \n        CDSCode Academic Year County Code District Code School Code County Name                      District Name                                   School Name                    District Type           School Type Educational Option Type NSLP Provision Status Charter School (Y/N) Charter School Number Charter Funding Type IRC Low Grade High Grade Enrollment (K-12) Free Meal Count (K-12) Percent (%) Eligible Free (K-12) FRPM Count (K-12) Percent (%) Eligible FRPM (K-12) Enrollment (Ages 5-17) Free Meal Count (Ages 5-17) Percent (%) Eligible Free (Ages 5-17) FRPM Count (Ages 5-17) Percent (%) Eligible FRPM (Ages 5-17) 2013-14 CALPADS Fall 1 Certification Status \n01100170109835     2014-2015          01         10017     0109835     Alameda Alameda County Office of Education                           FAME Public Charter County Office of Education (COE) K-12 Schools (Public)             Traditional                  None                    1                  0728      Directly funded   1         K         12            1087.0                  565.0                0.519779208831647             715.0                0.657773689052438                 1070.0                       553.0                     0.516822429906542                  702.0                      0.65607476635514                                           1 \n01100170112607     2014-2015          01         10017     0112607     Alameda Alameda County Office of Education        Envision Academy for Arts & Technology County Office of Education (COE) High Schools (Public)             Traditional                  None                    1                  0811      Directly funded   1         9         12             395.0                  186.0                0.470886075949367             186.0                0.470886075949367                  376.0                       182.0                     0.484042553191489                  182.0                     0.484042553191489                                           1 \n01100170118489     2014-2015          01         10017     0118489     Alameda Alameda County Office of Education Aspire California College Preparatory Academy County Office of Education (COE) High Schools (Public)             Traditional                  None                    1                  1049      Directly funded   1         9         12             244.0                  134.0                0.549180327868853             175.0                0.717213114754098                  230.0                       128.0                     0.556521739130435                  168.0                     0.730434782608696                                           1  \n */\n\nCREATE TABLE satscores\n(\n    cds         TEXT not null\n        primary key,\n    rtype       TEXT  not null,\n    sname       TEXT null,\n    dname       TEXT null,\n    cname       TEXT null,\n    enroll12    INTEGER         not null,\n    NumTstTakr  INTEGER          not null,\n    AvgScrRead  INTEGER          null,\n    AvgScrMath  INTEGER          null,\n    AvgScrWrite INTEGER          null,\n    NumGE1500   INTEGER          null,\n--     PctGE1500   double      null,\n        foreign key (cds) references schools (CDSCode)\n) \n /* \n 3 example rows: \n SELECT * FROM satscores LIMIT 3; \n           cds rtype                                  sname                              dname   cname enroll12 NumTstTakr AvgScrRead AvgScrMath AvgScrWrite NumGE1500 \n1100170000000     D                                   None Alameda County Office of Education Alameda      398         88        418        418         417        14 \n1100170109835     S                    FAME Public Charter Alameda County Office of Education Alameda       62         17        503        546         505         9 \n1100170112607     S Envision Academy for Arts & Technology Alameda County Office of Education Alameda       75         71        397        387         395         5  \n */\n\nCREATE TABLE schools\n(\n    CDSCode     TEXT not null\n        primary key,\n    NCESDist    TEXT  null,\n    NCESSchool  TEXT  null,\n    StatusType  TEXT  not null,\n    County      TEXT not null,\n    District    TEXT not null,\n    School      TEXT null,\n    Street      TEXT null,\n    StreetAbr   TEXT null,\n    City        TEXT null,\n    Zip         TEXT null,\n    State       TEXT  null,\n    MailStreet  TEXT null,\n    MailStrAbr  TEXT null,\n    MailCity    TEXT null,\n    MailZip     TEXT null,\n    MailState   TEXT  null,\n    Phone       TEXT null,\n    Ext         TEXT  null,\n    Website     TEXT null,\n    OpenDate    DATE        null,\n    ClosedDate  DATE        null,\n    Charter     INTEGER    null,\n    CharterNum  TEXT  null,\n    FundingType TEXT null,\n    DOC         TEXT  not null,\n    DOCType     TEXT not null,\n    SOC         TEXT  null,\n    SOCType     TEXT null,\n    EdOpsCode   TEXT  null,\n    EdOpsName   TEXT null,\n    EILCode     TEXT  null,\n    EILName     TEXT null,\n    GSoffered   TEXT null,\n    GSserved    TEXT  null,\n    Virtual     TEXT  null,\n    Magnet      INTEGER   null,\n    Latitude    REAL      null,\n    Longitude   REAL      null,\n    AdmFName1   TEXT null,\n    AdmLName1   TEXT null,\n    AdmEmail1   TEXT null,\n    AdmFName2   TEXT null,\n    AdmLName2   TEXT null,\n    AdmEmail2   TEXT null,\n    AdmFName3   TEXT  null,\n    AdmLName3   TEXT null,\n    AdmEmail3   TEXT null,\n    LastUpdate  DATE        not null\n) \n /* \n 3 example rows: \n SELECT * FROM schools LIMIT 3; \n        CDSCode NCESDist NCESSchool StatusType  County                           District                                 School                           Street                     StreetAbr    City        Zip State                       MailStreet                    MailStrAbr MailCity    MailZip MailState          Phone  Ext                  Website   OpenDate ClosedDate Charter CharterNum     FundingType DOC                          DOCType  SOC               SOCType EdOpsCode   EdOpsName  EILCode                     EILName GSoffered GSserved Virtual Magnet  Latitude  Longitude AdmFName1 AdmLName1                 AdmEmail1 AdmFName2 AdmLName2 AdmEmail2 AdmFName3 AdmLName3 AdmEmail3 LastUpdate \n01100170000000  0691051       None     Active Alameda Alameda County Office of Education                                   None           313 West Winton Avenue          313 West Winton Ave. Hayward 94544-1136    CA           313 West Winton Avenue          313 West Winton Ave.  Hayward 94544-1136        CA (510) 887-0152 None             www.acoe.org       None       None    None       None            None  00 County Office of Education (COE) None                  None      None        None     None                        None      None     None    None   None 37.658212 -122.09713   L Karen    Monroe         lkmonroe@acoe.org      None      None      None      None      None      None 2015-06-23 \n01100170109835  0691051      10546     Closed Alameda Alameda County Office of Education                    FAME Public Charter 39899 Balentine Drive, Suite 335 39899 Balentine Dr., Ste. 335  Newark 94560-5359    CA 39899 Balentine Drive, Suite 335 39899 Balentine Dr., Ste. 335   Newark 94560-5359        CA           None None                     None 2005-08-29 2015-07-31       1       0728 Directly funded  00 County Office of Education (COE)   65 K-12 Schools (Public)      TRAD Traditional ELEMHIGH Elementary-High Combination      K-12     K-12       P      0 37.521436 -121.99391      None      None                      None      None      None      None      None      None      None 2015-09-01 \n01100170112607  0691051      10947     Active Alameda Alameda County Office of Education Envision Academy for Arts & Technology              1515 Webster Street              1515 Webster St. Oakland 94612-3355    CA              1515 Webster Street              1515 Webster St.  Oakland      94612        CA (510) 596-8901 None www.envisionacademy.org/ 2006-08-28       None       1       0811 Directly funded  00 County Office of Education (COE)   66 High Schools (Public)      TRAD Traditional       HS                 High School      9-12     9-12       N      0  37.80452 -122.26815     Laura    Robell laura@envisionacademy.org      None      None      None      None      None      None 2015-06-18  \n */",
  "financial": "CREATE TABLE account\n(\n    account_id  INTEGER default 0 not null\n        primary key,\n    district_id INTEGER default 0 not null,\n    frequency   TEXT   not null,\n    date        DATE          not null,\n    foreign key (district_id) references district (district_id)\n) \n /* \n 3 example rows: \n SELECT * FROM account LIMIT 3; \n account_id district_id        frequency       date \n         1          18 POPLATEK MESICNE 1995-03-24 \n         2           1 POPLATEK MESICNE 1993-02-26 \n         3           5 POPLATEK MESICNE 1997-07-07  \n */\n\nCREATE TABLE card\n(\n    card_id INTEGER default 0 not null\n        primary key,\n    disp_id INTEGER           not null,\n    type    TEXT    not null,\n    issued  DATE          not null,\n    foreign key (disp_id) references disp (disp_id)\n) \n /* \n 3 example rows: \n SELECT * FROM card LIMIT 3; \n card_id disp_id    type     issued \n      1       9    gold 1998-10-16 \n      2      19 classic 1998-03-13 \n      3      41    gold 1995-09-03  \n */\n\nCREATE TABLE client\n(\n    client_id   INTEGER        not null\n        primary key,\n    gender      TEXT not null,\n    birth_date  DATE       not null,\n    district_id INTEGER        not null,\n    foreign key (district_id) references district (district_id)\n) \n /* \n 3 example rows: \n SELECT * FROM client LIMIT 3; \n client_id gender birth_date district_id \n        1      F 1970-12-13          18 \n        2      M 1945-02-04           1 \n        3      F 1940-10-09           1  \n */\n\nCREATE TABLE disp\n(\n    disp_id    INTEGER        not null\n        primary key,\n    client_id  INTEGER        not null,\n    account_id INTEGER        not null,\n    type      TEXT not null,\n    foreign key (account_id) references account (account_id),\n    foreign key (client_id) references client (client_id)\n) \n /* \n 3 example rows: \n SELECT * FROM disp LIMIT 3; \n disp_id client_id account_id      type \n      1         1          1     OWNER \n      2         2          2     OWNER \n      3         3          2 DISPONENT  \n */\n\nCREATE TABLE district\n(\n    district_id INTEGER default 0 not null\n        primary key,\n    A2          TEXT   not null,\n    A3          TEXT   not null,\n    A4          TEXT       not null,\n    A5          TEXT           not null,\n    A6          TEXT           not null,\n    A7          TEXT           not null,\n    A8          INTEGER        not null,\n    A9          INTEGER           not null,\n    A10         REAL not null,\n    A11         INTEGER           not null,\n    A12         REAL null,\n    A13         REAL not null,\n    A14         INTEGER           not null,\n    A15         INTEGER        null,\n    A16         INTEGER          not null\n) \n /* \n 3 example rows: \n SELECT * FROM district LIMIT 3; \n district_id          A2              A3      A4 A5 A6 A7 A8 A9   A10   A11 A12  A13 A14   A15   A16 \n          1 Hl.m. Praha          Prague 1204953  0  0  0  1  1 100.0 12541 0.2 0.43 167 85677 99107 \n          2     Benesov central Bohemia   88884 80 26  6  2  5  46.7  8507 1.6 1.85 132  2159  2674 \n          3      Beroun central Bohemia   75232 55 26  4  1  5  41.7  8980 1.9 2.21 111  2824  2813  \n */\n\nCREATE TABLE loan\n(\n    loan_id    INTEGER default 0 not null\n        primary key,\n    account_id INTEGER           not null,\n    date       DATE          not null,\n    amount     INTEGER           not null,\n    duration   INTEGER           not null,\n    payments   REAL not null,\n    status     TEXT    not null,\n    foreign key (account_id) references account (account_id)\n) \n /* \n 3 example rows: \n SELECT * FROM loan LIMIT 3; \n loan_id account_id       date amount duration payments status \n   4959          2 1994-01-05  80952       24   3373.0      A \n   4961         19 1996-04-29  30276       12   2523.0      B \n   4962         25 1997-12-08  30276       12   2523.0      A  \n */\n\nCREATE TABLE `order`\n(\n    order_id   INTEGER default 0 not null\n        primary key,\n    account_id INTEGER           not null,\n    bank_to    TEXT    not null,\n    account_to INTEGER           not null,\n    amount     REAL not null,\n    k_symbol   TEXT    not null,\n    foreign key (account_id) references account (account_id)\n) \n /* \n 3 example rows: \n SELECT * FROM `order` LIMIT 3; \n order_id account_id bank_to account_to amount k_symbol \n   29401          1      YZ   87144583 2452.0     SIPO \n   29402          2      ST   89597016 3372.7     UVER \n   29403          2      QR   13943797 7266.0     SIPO  \n */\n\nCREATE TABLE trans\n(\n    trans_id   INTEGER default 0    not null\n        primary key,\n    account_id INTEGER default 0    not null,\n    date       DATE             not null,\n    type       TEXT       not null,\n    operation  TEXT      null,\n    amount     INTEGER              not null,\n    balance    INTEGER             not null,\n    k_symbol   TEXT      null,\n    bank       TEXT       null,\n    account    INTEGER          null,\n    foreign key (account_id) references account (account_id)\n) \n /* \n 3 example rows: \n SELECT * FROM trans LIMIT 3; \n trans_id account_id       date   type     operation amount balance k_symbol bank  account \n       1          1 1995-03-24 PRIJEM         VKLAD   1000    1000     None None     None \n       5          1 1995-04-13 PRIJEM PREVOD Z UCTU   3679    4679     None   AB 41403269 \n       6          1 1995-05-13 PRIJEM PREVOD Z UCTU   3679   20977     None   AB 41403269  \n */",
  "toxicology": "CREATE TABLE `atom` (\n  `atom_id` TEXT NOT NULL,\n  `molecule_id` TEXT DEFAULT NULL,\n  `element` TEXT DEFAULT NULL,\n  PRIMARY KEY (`atom_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n) \n /* \n 3 example rows: \n SELECT * FROM atom LIMIT 3; \n atom_id molecule_id element \nTR000_1       TR000      cl \nTR000_2       TR000       c \nTR000_3       TR000      cl  \n */\n\nCREATE TABLE `bond` (\n  `bond_id` TEXT NOT NULL,\n  `molecule_id` TEXT DEFAULT NULL,\n  `bond_type` TEXT DEFAULT NULL,\n  PRIMARY KEY (`bond_id`),\n  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)\n) \n /* \n 3 example rows: \n SELECT * FROM bond LIMIT 3; \n   bond_id molecule_id bond_type \nTR000_1_2       TR000         - \nTR000_2_3       TR000         - \nTR000_2_4       TR000         -  \n */\n\nCREATE TABLE `connected` (\n  `atom_id` TEXT NOT NULL,\n  `atom_id2` TEXT NOT NULL,\n  `bond_id` TEXT DEFAULT NULL,\n  PRIMARY KEY (`atom_id`,`atom_id2`),\n  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE\n) \n /* \n 3 example rows: \n SELECT * FROM connected LIMIT 3; \n atom_id atom_id2   bond_id \nTR000_1  TR000_2 TR000_1_2 \nTR000_2  TR000_1 TR000_1_2 \nTR000_2  TR000_3 TR000_2_3  \n */\n\nCREATE TABLE `molecule` (\n  `molecule_id` TEXT NOT NULL,\n  `label` TEXT DEFAULT NULL,\n  PRIMARY KEY (`molecule_id`)\n) \n /* \n 3 example rows: \n SELECT * FROM molecule LIMIT 3; \n molecule_id label \n      TR000     + \n      TR001     + \n      TR002     -  \n */",
  "card_games": "CREATE TABLE sqlite_sequence(name,seq) \n /* \n 3 example rows: \n SELECT * FROM sqlite_sequence LIMIT 3; \n         name    seq \n       cards  56832 \nforeign_data 229205 \n  legalities 427907  \n */\n\nCREATE TABLE \"cards\"\n(\n    id                      INTEGER           not null\n        primary key autoincrement,\n    artist                  TEXT,\n    asciiName               TEXT,\n    availability            TEXT,\n    borderColor             TEXT,\n    cardKingdomFoilId       TEXT,\n    cardKingdomId           TEXT,\n    colorIdentity           TEXT,\n    colorIndicator          TEXT,\n    colors                  TEXT,\n    convertedManaCost       REAL,\n    duelDeck                TEXT,\n    edhrecRank              INTEGER,\n    faceConvertedManaCost   REAL,\n    faceName                TEXT,\n    flavorName              TEXT,\n    flavorText              TEXT,\n    frameEffects            TEXT,\n    frameVersion            TEXT,\n    hand                    TEXT,\n    hasAlternativeDeckLimit INTEGER default 0 not null,\n    hasContentWarning       INTEGER default 0 not null,\n    hasFoil                 INTEGER default 0 not null,\n    hasNonFoil              INTEGER default 0 not null,\n    isAlternative           INTEGER default 0 not null,\n    isFullArt               INTEGER default 0 not null,\n    isOnlineOnly            INTEGER default 0 not null,\n    isOversized             INTEGER default 0 not null,\n    isPromo                 INTEGER default 0 not null,\n    isReprint               INTEGER default 0 not null,\n    isReserved              INTEGER default 0 not null,\n    isStarter               INTEGER default 0 not null,\n    isStorySpotlight        INTEGER default 0 not null,\n    isTextless              INTEGER default 0 not null,\n    isTimeshifted           INTEGER default 0 not null,\n    keywords                TEXT,\n    layout                  TEXT,\n    leadershipSkills        TEXT,\n    life                    TEXT,\n    loyalty                 TEXT,\n    manaCost                TEXT,\n    mcmId                   TEXT,\n    mcmMetaId               TEXT,\n    mtgArenaId              TEXT,\n    mtgjsonV4Id             TEXT,\n    mtgoFoilId              TEXT,\n    mtgoId                  TEXT,\n    multiverseId            TEXT,\n    name                    TEXT,\n    number                  TEXT,\n    originalReleaseDate     TEXT,\n    originalText            TEXT,\n    originalType            TEXT,\n    otherFaceIds            TEXT,\n    power                   TEXT,\n    printings               TEXT,\n    promoTypes              TEXT,\n    purchaseUrls            TEXT,\n    rarity                  TEXT,\n    scryfallId              TEXT,\n    scryfallIllustrationId  TEXT,\n    scryfallOracleId        TEXT,\n    setCode                 TEXT,\n    side                    TEXT,\n    subtypes                TEXT,\n    supertypes              TEXT,\n    tcgplayerProductId      TEXT,\n    text                    TEXT,\n    toughness               TEXT,\n    type                    TEXT,\n    types                   TEXT,\n    uuid                    TEXT              not null\n        unique,\n    variations              TEXT,\n    watermark               TEXT\n) \n /* \n 3 example rows: \n SELECT * FROM cards LIMIT 3; \n id       artist asciiName availability borderColor cardKingdomFoilId cardKingdomId colorIdentity colorIndicator colors convertedManaCost duelDeck edhrecRank faceConvertedManaCost faceName flavorName                                flavorText frameEffects frameVersion hand hasAlternativeDeckLimit hasContentWarning hasFoil hasNonFoil isAlternative isFullArt isOnlineOnly isOversized isPromo isReprint isReserved isStarter isStorySpotlight isTextless isTimeshifted     keywords layout leadershipSkills life loyalty  manaCost mcmId mcmMetaId mtgArenaId                          mtgjsonV4Id mtgoFoilId mtgoId multiverseId              name number originalReleaseDate                                                                                                                                                                     originalText            originalType otherFaceIds power                                             printings promoTypes                                                                                                                                                                         purchaseUrls   rarity                           scryfallId               scryfallIllustrationId                     scryfallOracleId setCode side     subtypes supertypes tcgplayerProductId                                                                                                                                                                                    text toughness                    type    types                                 uuid                           variations watermark \n 1 Pete Venters      None   mtgo,paper       black              None        122719             W           None      W               7.0     None      15650                  None     None       None                                      None         None         2003 None                       0                 0       0          1             0         0            0           0       0         1          0         0                0          0             0 First strike normal             None None    None {5}{W}{W} 16165       156       None ad41be73-582f-58ed-abd4-a88c1f616ac3      27501  27500       130550 Ancestor's Chosen      1                None First strike (This creature deals combat damage before creatures without first strike.)\nWhen Ancestor's Chosen comes into play, you gain 1 life for each card in your graveyard. Creature - Human Cleric         None     4                                           10E,JUD,UMA       None {'cardKingdom': 'https://mtgjson.com/links/9fb51af0ad6f0736', 'cardmarket': 'https://mtgjson.com/links/ace8861194ee0b6a', 'tcgplayer': 'https://mtgjson.com/links/4843cea124a0d515'} uncommon 7a5cd03c-4227-4551-aa4b-7d119f0468b5 be2f7173-c8b7-4172-a388-9b2c6b3c16e5 fc2ccab7-cab1-4463-b73d-898070136d74     10E None Human,Cleric       None              15032 First strike (This creature deals combat damage before creatures without first strike.)\nWhen Ancestor's Chosen enters the battlefield, you gain 1 life for each card in your graveyard.         4 Creature — Human Cleric Creature 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c b7c19924-b4bf-56fc-aa73-f586e940bd42      None \n 2  Volkan Baǵa      None   mtgo,paper       black              None        122720             W           None      W               5.0     None      12702                  None     None       None Every tear shed is a drop of immortality.         None         2003 None                       0                 0       0          1             0         0            0           0       0         1          0         0                0          0             0       Flying normal             None None    None    {4}{W} 16166       176       None 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c      26993  26992       129465    Angel of Mercy      2                None                                          Flying (This creature can't be blocked except by creatures with flying or reach.)\nWhen Angel of Mercy comes into play, you gain 3 life.        Creature - Angel         None     3 10E,8ED,9ED,DDC,DVD,IMA,INV,JMP,MB1,P02,PS11,PSAL,S99       None {'cardKingdom': 'https://mtgjson.com/links/027095d094e58f5b', 'cardmarket': 'https://mtgjson.com/links/f6fb5098e1cd1b1e', 'tcgplayer': 'https://mtgjson.com/links/56c4b57293f350ef'} uncommon 8f7980d4-da43-4d6d-ad16-14b8a34ae91d e4d6c53f-e936-4be8-8b70-47c2be863b20 a2daaf32-dbfe-4618-892e-0da24f63a44a     10E None        Angel       None              15033                                                                                                                     Flying\nWhen Angel of Mercy enters the battlefield, you gain 3 life.         3        Creature — Angel Creature 57aaebc1-850c-503d-9f6e-bb8d00d8bf7c 8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a      None \n 3 Justin Sweet      None   mtgo,paper       black              None        122725             W           None      W               4.0     None      11081                  None     None       None                                      None         None         2003 None                       0                 0       0          1             0         0            0           0       0         1          0         0                0          0             0       Flying normal             None None    None    {3}{W} 16171       368       None c0de6fd8-367a-50fb-b2f4-2b8fa5aeb7d9      27473  27472       129470  Aven Cloudchaser      7                None                             Flying (This creature can't be blocked except by creatures with flying or reach.)\nWhen Aven Cloudchaser comes into play, destroy target enchantment. Creature - Bird Soldier         None     2                                       10E,8ED,9ED,ODY       None {'cardKingdom': 'https://mtgjson.com/links/9246105d88032a9f', 'cardmarket': 'https://mtgjson.com/links/dcdfe48e6a8f9e1e', 'tcgplayer': 'https://mtgjson.com/links/3ce595aabe276f80'}   common 407110e9-19af-4ff5-97b2-c03225031a73 2eb663cd-020a-46d8-a6d9-bb63d4b5c848 48bda7dd-d023-41e8-8c28-e0cfda0d07ca     10E None Bird,Soldier       None              15045                             Flying (This creature can't be blocked except by creatures with flying or reach.)\nWhen Aven Cloudchaser enters the battlefield, destroy target enchantment.         2 Creature — Bird Soldier Creature 8ac972b5-9f6e-5cc8-91c3-b9a40a98232e 6adaf14d-43e3-521a-adf1-960c808e5b1a      None  \n */\n\nCREATE TABLE \"foreign_data\"\n(\n    id           INTEGER not null\n        primary key autoincrement,\n    flavorText   TEXT,\n    language     TEXT,\n    multiverseid INTEGER,\n    name         TEXT,\n    text         TEXT,\n    type         TEXT,\n    uuid         TEXT\n        references cards (uuid)\n) \n /* \n 3 example rows: \n SELECT * FROM foreign_data LIMIT 3; \n id                                                  flavorText language multiverseid                     name                                                                                                                                                                                                           text                       type                                 uuid \n 1 „Es ist der Wille aller, und meine Hand, die ihn ausführt.\"   German       148411 Ausgewählter der Ahnfrau             Erstschlag (Diese Kreatur fügt Kampfschaden vor Kreaturen ohne Erstschlag zu.)\nWenn der Ausgewählte der Ahnfrau ins Spiel kommt, erhältst du 1 Lebenspunkt für jede Karte in deinem Friedhof dazu. Kreatur — Mensch, Kleriker 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c \n 2              \"La voluntad de todos, realizada por mi mano.\"  Spanish       150317 Elegido de la Antepasada Daña primero. (Esta criatura hace daño de combate antes que las criaturas sin la habilidad de dañar primero.)\nCuando el Elegido de la Antepasada entre en juego, ganas 1 vida por cada carta en tu cementerio.  Criatura — Clérigo humano 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c \n 3                   « La volonté de tous passe par ma main. »   French       149934         Élu de l'Ancêtre  Initiative (Cette créature inflige des blessures de combat avant les créatures sans l'initiative.)\nQuand l'Élu de l'Ancêtre arrive en jeu, vous gagnez 1 point de vie pour chaque carte dans votre cimetière. Créature : humain et clerc 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c  \n */\n\nCREATE TABLE \"legalities\"\n(\n    id     INTEGER not null\n        primary key autoincrement,\n    format TEXT,\n    status TEXT,\n    uuid   TEXT\n        references cards (uuid)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM legalities LIMIT 3; \n id    format status                                 uuid \n 1 commander  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c \n 2      duel  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c \n 3    legacy  Legal 5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c  \n */\n\nCREATE TABLE \"sets\"\n(\n    id               INTEGER           not null\n        primary key autoincrement,\n    baseSetSize      INTEGER,\n    block            TEXT,\n    booster          TEXT,\n    code             TEXT              not null\n        unique,\n    isFoilOnly       INTEGER default 0 not null,\n    isForeignOnly    INTEGER default 0 not null,\n    isNonFoilOnly    INTEGER default 0 not null,\n    isOnlineOnly     INTEGER default 0 not null,\n    isPartialPreview INTEGER default 0 not null,\n    keyruneCode      TEXT,\n    mcmId            INTEGER,\n    mcmIdExtras      INTEGER,\n    mcmName          TEXT,\n    mtgoCode         TEXT,\n    name             TEXT,\n    parentCode       TEXT,\n    releaseDate      DATE,\n    tcgplayerGroupId INTEGER,\n    totalSetSize     INTEGER,\n    type             TEXT\n) \n /* \n 3 example rows: \n SELECT * FROM sets LIMIT 3; \n id baseSetSize    block                                                                                                                                                                                                                                                         booster code isFoilOnly isForeignOnly isNonFoilOnly isOnlineOnly isPartialPreview keyruneCode mcmId mcmIdExtras        mcmName mtgoCode              name parentCode releaseDate tcgplayerGroupId totalSetSize    type \n 1         383 Core Set {'default': {'boosters': [{'contents': {'basic': 1, 'common': 10, 'rare': 1, 'uncommon': 3}, 'weight': 1913922}, {'contents': {'basic': 1, 'common': 9, 'foilCommon': 1, 'rare': 1, 'uncommon': 3}, 'weight': 318987}, {'contents': {'basic': 1, 'common': 10,   10E          0             0             0            0                0         10E    74        None  Tenth Edition      10E     Tenth Edition       None  2007-07-13                1          508    core \n 2         302 Core Set {'default': {'boosters': [{'contents': {'common': 11, 'rare': 1, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'cards': {'0ab4e3e6-f9fe-5fdc-9697-fd20690a0e15': 1, '0b326a61-0389-54e2-ac58-7bb47ca88202': 1, '0f099574-e9f7-  2ED          0             0             1            0                0         2ED  None        None           None     None Unlimited Edition       None  1993-12-01              115          302    core \n 3         332     None {'default': {'boosters': [{'contents': {'common': 8, 'dedicatedFoil2xm': 2, 'rareMythic': 2, 'uncommon': 3}, 'weight': 1}], 'boostersTotalWeight': 1, 'sheets': {'common': {'balanceColors': True, 'cards': {'01df4e32-7fe4-5b8d-9460-0f08fa29153e': 1, '032c60  2XM          0             0             0            0                0         2XM  3204        3209 Double Masters      2XM    Double Masters       None  2020-08-07             2655          384 masters  \n */\n\nCREATE TABLE \"set_translations\"\n(\n    id          INTEGER not null\n        primary key autoincrement,\n    language    TEXT,\n    setCode     TEXT\n        references sets (code)\n            on update cascade on delete cascade,\n    translation TEXT\n) \n /* \n 3 example rows: \n SELECT * FROM set_translations LIMIT 3; \n id            language setCode     translation \n 1  Chinese Simplified     10E         核心系列第十版 \n 2 Chinese Traditional     10E         核心系列第十版 \n 3              French     10E Dixième édition  \n */\n\nCREATE TABLE \"rulings\"\n(\n    id   INTEGER not null\n        primary key autoincrement,\n    date DATE,\n    text TEXT,\n    uuid TEXT\n        references cards (uuid)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM rulings LIMIT 3; \n id       date                                                                                                                                                               text                                 uuid \n 1 2007-07-15                                                                                You draw the card when Bandage resolves, not when the damage is actually prevented. 6d268c95-c176-5766-9a46-c14f739aba1c \n 2 2007-02-01                                                                        If you double a negative life total, you do the real math. A life total of -10 becomes -20. 56f4935b-f6c5-59b9-88bf-9bcce20247ce \n 3 2007-07-15 Beacon of Immortality’s effect counts as life gain (or life loss, if the life total was negative) for effects that trigger on or replace life gain (or life loss). 56f4935b-f6c5-59b9-88bf-9bcce20247ce  \n */",
  "codebase_community": "CREATE TABLE badges\n(\n    Id     INTEGER          not null\n        primary key,\n    UserId INTEGER          null,\n    Name   TEXT null,\n    Date   DATETIME     null,\n        foreign key (UserId) references users (Id)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM badges LIMIT 3; \n Id UserId    Name                  Date \n 1      5 Teacher 2010-07-19 19:39:07.0 \n 2      6 Teacher 2010-07-19 19:39:07.0 \n 3      8 Teacher 2010-07-19 19:39:07.0  \n */\n\nCREATE TABLE comments\n(\n    Id              INTEGER          not null\n        primary key,\n    PostId          INTEGER          null,\n    Score           INTEGER          null,\n    Text            TEXT     null,\n    CreationDate    DATETIME     null,\n    UserId          INTEGER          null,\n    UserDisplayName TEXT null,\n        foreign key (PostId) references posts (Id)\n            on update cascade on delete cascade,\n        foreign key (UserId) references users (Id)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM comments LIMIT 3; \n Id PostId Score                                                                                               Text          CreationDate UserId UserDisplayName \n 1      3     5 Could be a poster child fo argumentative and subjective.  At the least, need to define 'valuable'. 2010-07-19 19:15:52.0     13            None \n 2      5     0                                                          Yes, R is nice- but WHY is it 'valuable'. 2010-07-19 19:16:14.0     13            None \n 3      9     0                            Again- why?  How would I convince my boss to use this over, say, Excel. 2010-07-19 19:18:54.0     13            None  \n */\n\nCREATE TABLE postHistory\n(\n    Id                INTEGER          not null UNIQUE\n        primary key,\n    PostHistoryTypeId INTEGER          null,\n    PostId            INTEGER          null,\n    RevisionGUID      TEXT null,\n    CreationDate      DATETIME     null,\n    UserId            INTEGER          null,\n    Text              TEXT     null,\n    Comment           TEXT         null,\n    UserDisplayName   TEXT null,\n        foreign key (PostId) references posts (Id)\n            on update cascade on delete cascade,\n        foreign key (UserId) references users (Id)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM postHistory LIMIT 3; \n Id PostHistoryTypeId PostId                         RevisionGUID          CreationDate UserId                                                                                Text Comment UserDisplayName \n 1                 2      1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12.0      8 How should I elicit prior distributions from experts when fitting a Bayesian model?                         \n 2                 1      1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12.0      8                                                       Eliciting priors from experts                         \n 3                 3      1 e58bf7fd-e60f-4c58-a6e4-dfc91cf98a69 2010-07-19 19:12:12.0      8                                                      <bayesian><prior><elicitation>                          \n */\n\nCREATE TABLE postLinks\n(\n    Id            INTEGER      not null\n        primary key,\n    CreationDate  DATETIME null,\n    PostId        INTEGER      null,\n    RelatedPostId INTEGER      null,\n    LinkTypeId    INTEGER      null,\n        foreign key (PostId) references posts (Id)\n            on update cascade on delete cascade,\n        foreign key (RelatedPostId) references posts (Id)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM postLinks LIMIT 3; \n  Id          CreationDate PostId RelatedPostId LinkTypeId \n108 2010-07-21 14:47:33.0    395           173          1 \n145 2010-07-23 16:30:41.0    548           539          1 \n217 2010-07-26 20:12:15.0    375            30          1  \n */\n\nCREATE TABLE posts\n(\n    Id                    INTEGER          not null UNIQUE\n        primary key,\n    PostTypeId            INTEGER          null,\n    AcceptedAnswerId      INTEGER          null,\n    CreaionDate           DATETIME     null,\n    Score                 INTEGER          null,\n    ViewCount             INTEGER          null,\n    Body                  TEXT     null,\n    OwnerUserId           INTEGER          null,\n    LasActivityDate       DATETIME     null,\n    Title                 TEXT null,\n    Tags                  TEXT null,\n    AnswerCount           INTEGER          null,\n    CommentCount          INTEGER          null,\n    FavoriteCount         INTEGER          null,\n    LastEditorUserId      INTEGER          null,\n    LastEditDate          DATETIME     null,\n    CommunityOwnedDate    DATETIME    null,\n    ParentId              INTEGER          null,\n    ClosedDate            DATETIME     null,\n    OwnerDisplayName      TEXT null,\n    LastEditorDisplayName TEXT null,\n        foreign key (LastEditorUserId) references users (Id)\n            on update cascade on delete cascade,\n        foreign key (OwnerUserId) references users (Id)\n            on update cascade on delete cascade,\n        foreign key (ParentId) references posts (Id)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM posts LIMIT 3; \n Id PostTypeId AcceptedAnswerId           CreaionDate Score ViewCount                                                                                                                                                                                                           Body OwnerUserId       LasActivityDate                                                             Title                           Tags AnswerCount CommentCount FavoriteCount LastEditorUserId          LastEditDate    CommunityOwnedDate ParentId ClosedDate OwnerDisplayName LastEditorDisplayName \n 1          1               15 2010-07-19 19:12:12.0    23      1278                                                                                                                    <p>How should I elicit prior distributions from experts when fitting a Bayesian model?</p>\n           8 2010-09-15 21:08:26.0                                     Eliciting priors from experts <bayesian><prior><elicitation>           5            1            14             None                  None                  None     None       None             None                  None \n 2          1               59 2010-07-19 19:12:57.0    22      8198                                                             <p>In many different statistical methods there is an \"assumption of normality\".  What is \"normality\" and how do I know if there is normality?</p>\n          24 2012-11-12 09:21:54.0                                                What is normality?     <distributions><normality>           7            1             8               88 2010-08-07 17:56:44.0                  None     None       None             None                  None \n 3          1                5 2010-07-19 19:13:28.0    54      3613 <p>What are some valuable Statistical Analysis open source projects available right now?</p>\n\n<p>Edit: as pointed out by Sharpie, valuable could mean helping you get things done faster or more cheaply.</p>\n          18 2013-05-27 14:48:36.0 What are some valuable Statistical Analysis open source projects?        <software><open-source>          19            4            36              183 2011-02-12 05:50:03.0 2010-07-19 19:13:28.0     None       None             None                  None  \n */\n\nCREATE TABLE tags\n(\n    Id            INTEGER          not null\n        primary key,\n    TagName       TEXT null,\n    Count         INTEGER          null,\n    ExcerptPostId INTEGER          null,\n    WikiPostId    INTEGER          null,\n    foreign key (ExcerptPostId) references posts (Id)\n        on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM tags LIMIT 3; \n Id     TagName Count ExcerptPostId WikiPostId \n 1    bayesian  1342         20258      20257 \n 2       prior   168         62158      62157 \n 3 elicitation     6          None       None  \n */\n\nCREATE TABLE users\n(\n    Id              INTEGER          not null UNIQUE\n        primary key,\n    Reputation      INTEGER          null,\n    CreationDate    DATETIME     null,\n    DisplayName     TEXT null,\n    LastAccessDate  DATETIME     null,\n    WebsiteUrl      TEXT null,\n    Location        TEXT null,\n    AboutMe         TEXT     null,\n    Views           INTEGER          null,\n    UpVotes         INTEGER          null,\n    DownVotes       INTEGER          null,\n    AccountId       INTEGER          null,\n    Age             INTEGER          null,\n    ProfileImageUrl TEXT null\n) \n /* \n 3 example rows: \n SELECT * FROM users LIMIT 3; \n Id Reputation          CreationDate  DisplayName        LastAccessDate                     WebsiteUrl           LocationboutMe Views UpVotes DownVotes AccountId  Age ProfileImageUrl \n-1          1 2010-07-19 06:55:26.0    Community 2010-07-19 06:55:26.0 http://meta.stackexchange.com/ on the server farm <p>Hi, I'm not really a person.</p>\n\n<p>I'm a background process that helps keep this site clean!</p>\n\n<p>I do things like</p>\n\n<ul>\n<li>Randomly poke old unanswered questions every hour so they get some attention</li>\n<li>Own community questions and answers so nobody gets unnecessary reputation from them</li>\n<li>Own downvotes on spam/evil posts that get permanently deleted</li>\n<li>Own suggested edits from anonymous users</li>\n<li><a href=\"http://meta.stackexchange.com/a/92006\">Remove abandoned questions</a></li>\n</ul>\n     0    5007      1920        -1 None            None \n 2        101 2010-07-19 14:01:36.0 Geoff Dalgas 2013-11-12 22:07:23.0       http://stackoverflow.com      Corvallis, OR                                                                                                                                                                                                                                                     <p>Developer on the StackOverflow team.  Find me on</p>\n\n<p><a href=\"http://www.twitter.com/SuperDalgas\" rel=\"nofollow\">Twitter</a>\n<br><br>\n<a href=\"http://blog.stackoverflow.com/2009/05/welcome-stack-overflow-valued-associate-00003/\">Stack Overflow Valued Associate #00003</a></p>\n    25       3         0         2   37            None \n 3        101 2010-07-19 15:34:50.0 Jarrod Dixon 2014-08-08 06:42:58.0       http://stackoverflow.com       New York, NY                                                                                     <p><a href=\"http://blog.stackoverflow.com/2009/01/welcome-stack-overflow-valued-associate-00002/\">Developer on the Stack Overflow team</a>.</p>\n\n<p>Was dubbed <strong>SALTY SAILOR</strong> by Jeff Atwood, as filth and flarn would oft-times fly when dealing with a particularly nasty bug!</p>\n\n<ul>\n<li>Twitter me: <a href=\"http://twitter.com/jarrod_dixon\" rel=\"nofollow\">jarrod_dixon</a></li>\n<li>Email me: jarrod.m.dixon@gmail.com</li>\n</ul>\n    22      19         0         3   35            None  \n */\n\nCREATE TABLE votes\n(\n    Id           INTEGER  not null\n        primary key,\n    PostId       INTEGER  null,\n    VoteTypeId   INTEGER  null,\n    CreationDate DATE null,\n    UserId       INTEGER  null,\n    BountyAmount INTEGER  null,\n        foreign key (PostId) references posts (Id)\n            on update cascade on delete cascade,\n        foreign key (UserId) references users (Id)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM votes LIMIT 3; \n Id PostId VoteTypeId CreationDate UserId BountyAmount \n 1      3          2   2010-07-19   None         None \n 2      2          2   2010-07-19   None         None \n 3      5          2   2010-07-19   None         None  \n */",
  "superhero": "CREATE TABLE alignment\n(\n    id        INTEGER not null\n            primary key,\n    alignment TEXT default NULL\n) \n /* \n 3 example rows: \n SELECT * FROM alignment LIMIT 3; \n id alignment \n 1      Good \n 2       Bad \n 3   Neutral  \n */\n\nCREATE TABLE attribute\n(\n    id             INTEGER not null\n            primary key,\n    attribute_name TEXT default NULL\n) \n /* \n 3 example rows: \n SELECT * FROM attribute LIMIT 3; \n id attribute_name \n 1   Intelligence \n 2       Strength \n 3          Speed  \n */\n\nCREATE TABLE colour\n(\n    id     INTEGER not null\n            primary key,\n    colour TEXT default NULL\n) \n /* \n 3 example rows: \n SELECT * FROM colour LIMIT 3; \n id    colour \n 1 No Colour \n 2     Amber \n 3    Auburn  \n */\n\nCREATE TABLE gender\n(\n    id     INTEGER not null\n            primary key,\n    gender TEXT default NULL\n) \n /* \n 3 example rows: \n SELECT * FROM gender LIMIT 3; \n id gender \n 1   Male \n 2 Female \n 3    N/A  \n */\n\nCREATE TABLE publisher\n(\n    id             INTEGER not null\n            primary key,\n    publisher_name TEXT default NULL\n) \n /* \n 3 example rows: \n SELECT * FROM publisher LIMIT 3; \n id    publisher_name \n 1                   \n 2       ABC Studios \n 3 Dark Horse Comics  \n */\n\nCREATE TABLE race\n(\n    id   INTEGER not null\n            primary key,\n    race TEXT default NULL\n) \n /* \n 3 example rows: \n SELECT * FROM race LIMIT 3; \n id  race \n 1     - \n 2 Alien \n 3 Alpha  \n */\n\nCREATE TABLE superhero\n(\n    id             INTEGER not null\n            primary key,\n    superhero_name TEXT default NULL,\n    full_name      TEXT default NULL,\n    gender_id      INTEGER          default NULL,\n    eye_colour_id  INTEGER          default NULL,\n    hair_colour_id INTEGER          default NULL,\n    skin_colour_id INTEGER          default NULL,\n    race_id        INTEGER          default NULL,\n    publisher_id   INTEGER          default NULL,\n    alignment_id   INTEGER          default NULL,\n    height_cm      INTEGER          default NULL,\n    weight_kg      INTEGER          default NULL,\n    foreign key (alignment_id) references alignment(id),\n    foreign key (eye_colour_id) references colour(id),\n    foreign key (gender_id) references gender(id),\n    foreign key (hair_colour_id) references colour(id),\n    foreign key (publisher_id) references publisher(id),\n    foreign key (race_id) references race(id),\n    foreign key (skin_colour_id) references colour(id)\n) \n /* \n 3 example rows: \n SELECT * FROM superhero LIMIT 3; \n id superhero_name              full_name gender_id eye_colour_id hair_colour_id skin_colour_id race_id publisher_id alignment_id height_cm weight_kg \n 1        3-D Man       Charles Chandler         1             9             13              1       1           13            1       188        90 \n 2         A-Bomb Richard Milhouse Jones         1            33              1              1      24           13            1       203       441 \n 3     Abe Sapien         Abraham Sapien         1             7              1              7      33            3            1       191        65  \n */\n\nCREATE TABLE hero_attribute\n(\n    hero_id         INTEGER default NULL,\n    attribute_id    INTEGER default NULL,\n    attribute_value INTEGER default NULL,\n    foreign key (attribute_id) references attribute(id),\n    foreign key (hero_id) references superhero(id)\n) \n /* \n 3 example rows: \n SELECT * FROM hero_attribute LIMIT 3; \n hero_id attribute_id attribute_value \n      1            1              80 \n      2            1              75 \n      3            1              95  \n */\n\nCREATE TABLE superpower\n(\n    id         INTEGER not null\n            primary key,\n    power_name TEXT default NULL\n) \n /* \n 3 example rows: \n SELECT * FROM superpower LIMIT 3; \n id          power_name \n 1             Agility \n 2 Accelerated Healing \n 3  Lantern Power Ring  \n */\n\nCREATE TABLE hero_power\n(\n    hero_id  INTEGER default NULL,\n    power_id INTEGER default NULL,\n    foreign key (hero_id) references superhero(id),\n    foreign key (power_id) references superpower(id)\n) \n /* \n 3 example rows: \n SELECT * FROM hero_power LIMIT 3; \n hero_id power_id \n      1        1 \n      1       18 \n      1       26  \n */",
  "formula_1": "CREATE TABLE sqlite_sequence(name,seq) \n /* \n 3 example rows: \n SELECT * FROM sqlite_sequence LIMIT 3; \n               name   seq \n          circuits    73 \nconstructorResults 15579 \n      constructors   210  \n */\n\nCREATE TABLE circuits\n(\n    circuitId  INTEGER\n        primary key autoincrement,\n    circuitRef TEXT default '' not null,\n    name       TEXT default '' not null,\n    location   TEXT,\n    country    TEXT,\n    lat        REAL,\n    lng        REAL,\n    alt        INTEGER,\n    url        TEXT default '' not null\n        unique\n) \n /* \n 3 example rows: \n SELECT * FROM circuits LIMIT 3; \n circuitId circuitRef                           name     location  country     lat     lng  alt                                                         url \n        2     sepang   Sepang International Circuit Kuala Lumpur Malaysia 2.76083 101.738 None   http://en.wikipedia.org/wiki/Sepang_International_Circuit \n        3    bahrain  Bahrain International Circuit       Sakhir  Bahrain 26.0325 50.5106 None  http://en.wikipedia.org/wiki/Bahrain_International_Circuit \n        4  catalunya Circuit de Barcelona-Catalunya     Montmeló    Spain   41.57 2.26111 None http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya  \n */\n\nCREATE TABLE constructors\n(\n    constructorId  INTEGER\n        primary key autoincrement,\n    constructorRef TEXT default '' not null,\n    name           TEXT default '' not null\n        unique,\n    nationality    TEXT,\n    url            TEXT default '' not null\n) \n /* \n 3 example rows: \n SELECT * FROM constructors LIMIT 3; \n constructorId constructorRef       name nationality                                                          url \n            1        mclaren    McLaren     British                         http://en.wikipedia.org/wiki/McLaren \n            2     bmw_sauber BMW Sauber      German                      http://en.wikipedia.org/wiki/BMW_Sauber \n            3       williams   Williams     British http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering  \n */\n\nCREATE TABLE drivers\n(\n    driverId    INTEGER\n        primary key autoincrement,\n    driverRef   TEXT default '' not null,\n    number      INTEGER,\n    code        TEXT,\n    forename    TEXT default '' not null,\n    surname     TEXT default '' not null,\n    dob         DATE,\n    nationality TEXT,\n    url         TEXT default '' not null\n        unique\n) \n /* \n 3 example rows: \n SELECT * FROM drivers LIMIT 3; \n driverId driverRef number code forename  surname        dob nationality                                         url \n       1  hamilton     44  HAM    Lewis Hamilton 1985-01-07     British http://en.wikipedia.org/wiki/Lewis_Hamilton \n       2  heidfeld   None  HEI     Nick Heidfeld 1977-05-10      German  http://en.wikipedia.org/wiki/Nick_Heidfeld \n       3   rosberg      6  ROS     Nico  Rosberg 1985-06-27      German   http://en.wikipedia.org/wiki/Nico_Rosberg  \n */\n\nCREATE TABLE seasons\n(\n    year INTEGER default 0  not null\n        primary key,\n    url  TEXT    default '' not null\n        unique\n) \n /* \n 3 example rows: \n SELECT * FROM seasons LIMIT 3; \n year                                                  url \n1950 http://en.wikipedia.org/wiki/1950_Formula_One_season \n1951 http://en.wikipedia.org/wiki/1951_Formula_One_season \n1952 http://en.wikipedia.org/wiki/1952_Formula_One_season  \n */\n\nCREATE TABLE races\n(\n    raceId    INTEGER\n        primary key autoincrement,\n    year      INTEGER default 0            not null,\n    round     INTEGER default 0            not null,\n    circuitId INTEGER default 0            not null,\n    name      TEXT    default ''           not null,\n    date      DATE    default '0000-00-00' not null,\n    time      TEXT,\n    url       TEXT unique,\n    foreign key (year) references seasons(year),\n    foreign key (circuitId) references circuits(circuitId)\n) \n /* \n 3 example rows: \n SELECT * FROM races LIMIT 3; \n raceId year round circuitId                  name       date     time                                                     url \n     1 2009     1         1 Australian Grand Prix 2009-03-29 06:00:00 http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix \n     2 2009     2         2  Malaysian Grand Prix 2009-04-05 09:00:00  http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix \n     3 2009     3        17    Chinese Grand Prix 2009-04-19 07:00:00    http://en.wikipedia.org/wiki/2009_Chinese_Grand_Prix  \n */\n\nCREATE TABLE constructorResults\n(\n    constructorResultsId INTEGER\n        primary key autoincrement,\n    raceId               INTEGER default 0 not null,\n    constructorId        INTEGER default 0 not null,\n    points               REAL,\n    status               TEXT,\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n\n) \n /* \n 3 example rows: \n SELECT * FROM constructorResults LIMIT 3; \n constructorResultsId raceId constructorId points status \n                   1     18             1   14.0   None \n                   2     18             2    8.0   None \n                   3     18             3    9.0   None  \n */\n\nCREATE TABLE constructorStandings\n(\n    constructorStandingsId INTEGER\n        primary key autoincrement,\n    raceId                 INTEGER default 0 not null,\n    constructorId          INTEGER default 0 not null,\n    points                 REAL   default 0 not null,\n    position               INTEGER,\n    positionText           TEXT,\n    wins                   INTEGER default 0 not null,\n    foreign key (raceId) references races(raceId),\n    foreign key (constructorId) references constructors(constructorId)\n) \n /* \n 3 example rows: \n SELECT * FROM constructorStandings LIMIT 3; \n constructorStandingsId raceId constructorId points position positionText wins \n                     1     18             1   14.0        1            1    1 \n                     2     18             2    8.0        3            3    0 \n                     3     18             3    9.0        2            2    0  \n */\n\nCREATE TABLE driverStandings\n(\n    driverStandingsId INTEGER\n        primary key autoincrement,\n    raceId            INTEGER default 0 not null,\n    driverId          INTEGER default 0 not null,\n    points            REAL   default 0 not null,\n    position          INTEGER,\n    positionText      TEXT,\n    wins              INTEGER default 0 not null,\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n) \n /* \n 3 example rows: \n SELECT * FROM driverStandings LIMIT 3; \n driverStandingsId raceId driverId points position positionText wins \n                1     18        1   10.0        1            1    1 \n                2     18        2    8.0        2            2    0 \n                3     18        3    6.0        3            3    0  \n */\n\nCREATE TABLE lapTimes\n(\n    raceId       INTEGER not null,\n    driverId     INTEGER not null,\n    lap          INTEGER not null,\n    position     INTEGER,\n    time         TEXT,\n    milliseconds INTEGER,\n    primary key (raceId, driverId, lap),\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n) \n /* \n 3 example rows: \n SELECT * FROM lapTimes LIMIT 3; \n raceId driverId lap position     time milliseconds \n     1        1   1       13 1:49.088       109088 \n     1        1   2       12 1:33.740        93740 \n     1        1   3       11 1:31.600        91600  \n */\n\nCREATE TABLE pitStops\n(\n    raceId       INTEGER not null,\n    driverId     INTEGER not null,\n    stop         INTEGER not null,\n    lap          INTEGER not null,\n    time         TEXT    not null,\n    duration     TEXT,\n    milliseconds INTEGER,\n    primary key (raceId, driverId, stop),\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId)\n) \n /* \n 3 example rows: \n SELECT * FROM pitStops LIMIT 3; \n raceId driverId stop lap     time duration milliseconds \n   841        1    1  16 17:28:24   23.227        23227 \n   841        1    2  36 17:59:29   23.199        23199 \n   841        2    1  15 17:27:41   22.994        22994  \n */\n\nCREATE TABLE qualifying\n(\n    qualifyId     INTEGER\n        primary key autoincrement,\n    raceId        INTEGER default 0 not null,\n    driverId      INTEGER default 0 not null,\n    constructorId INTEGER default 0 not null,\n    number        INTEGER default 0 not null,\n    position      INTEGER,\n    q1            TEXT,\n    q2            TEXT,\n    q3            TEXT,\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId)\n) \n /* \n 3 example rows: \n SELECT * FROM qualifying LIMIT 3; \n qualifyId raceId driverId constructorId number position       q1       q2       q3 \n        1     18        1             1     22        1 1:26.572 1:25.187 1:26.714 \n        2     18        9             2      4        2 1:26.103 1:25.315 1:26.869 \n        3     18        5             1     23        3 1:25.664 1:25.452 1:27.079  \n */\n\nCREATE TABLE status\n(\n    statusId INTEGER\n        primary key autoincrement,\n    status   TEXT default '' not null\n) \n /* \n 3 example rows: \n SELECT * FROM status LIMIT 3; \n statusId       status \n       1     Finished \n       2 Disqualified \n       3     Accident  \n */\n\nCREATE TABLE results\n(\n    resultId        INTEGER\n        primary key autoincrement,\n    raceId          INTEGER default 0  not null,\n    driverId        INTEGER default 0  not null,\n    constructorId   INTEGER default 0  not null,\n    number          INTEGER,\n    grid            INTEGER default 0  not null,\n    position        INTEGER,\n    positionText    TEXT    default '' not null,\n    positionOrder   INTEGER default 0  not null,\n    points          REAL   default 0  not null,\n    laps            INTEGER default 0  not null,\n    time            TEXT,\n    milliseconds    INTEGER,\n    fastestLap      INTEGER,\n    rank            INTEGER default 0,\n    fastestLapTime  TEXT,\n    fastestLapSpeed TEXT,\n    statusId        INTEGER default 0  not null,\n    foreign key (raceId) references races(raceId),\n    foreign key (driverId) references drivers(driverId),\n    foreign key (constructorId) references constructors(constructorId),\n    foreign key (statusId) references status(statusId)\n) \n /* \n 3 example rows: \n SELECT * FROM results LIMIT 3; \n resultId raceId driverId constructorId number grid position positionText positionOrder points laps        time milliseconds fastestLap rank fastestLapTime fastestLapSpeed statusId \n       1     18        1             1     22    1        1            1             1   10.0   58 1:34:50.616      5690616         39    2       1:27.452         218.300        1 \n       2     18        2             2      3    5        2            2             2    8.0   58      +5.478      5696094         41    3       1:27.739         217.586        1 \n       3     18        3             3      7    7        3            3             3    6.0   58      +8.163      5698779         41    5       1:28.090         216.719        1  \n */",
  "european_football_2": "CREATE TABLE sqlite_sequence(name,seq) \n /* \n 3 example rows: \n SELECT * FROM sqlite_sequence LIMIT 3; \n    name    seq \n   Team 103916 \nCountry  51958 \n League  51958  \n */\n\nCREATE TABLE \"Player_Attributes\" (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`player_fifa_api_id`\tINTEGER,\n\t`player_api_id`\tINTEGER,\n\t`date`\tTEXT,\n\t`overall_rating`\tINTEGER,\n\t`potential`\tINTEGER,\n\t`preferred_foot`\tTEXT,\n\t`attacking_work_rate`\tTEXT,\n\t`defensive_work_rate`\tTEXT,\n\t`crossing`\tINTEGER,\n\t`finishing`\tINTEGER,\n\t`heading_accuracy`\tINTEGER,\n\t`short_passing`\tINTEGER,\n\t`volleys`\tINTEGER,\n\t`dribbling`\tINTEGER,\n\t`curve`\tINTEGER,\n\t`free_kick_accuracy`\tINTEGER,\n\t`long_passing`\tINTEGER,\n\t`ball_control`\tINTEGER,\n\t`acceleration`\tINTEGER,\n\t`sprint_speed`\tINTEGER,\n\t`agility`\tINTEGER,\n\t`reactions`\tINTEGER,\n\t`balance`\tINTEGER,\n\t`shot_power`\tINTEGER,\n\t`jumping`\tINTEGER,\n\t`stamina`\tINTEGER,\n\t`strength`\tINTEGER,\n\t`long_shots`\tINTEGER,\n\t`aggression`\tINTEGER,\n\t`interceptions`\tINTEGER,\n\t`positioning`\tINTEGER,\n\t`vision`\tINTEGER,\n\t`penalties`\tINTEGER,\n\t`marking`\tINTEGER,\n\t`standing_tackle`\tINTEGER,\n\t`sliding_tackle`\tINTEGER,\n\t`gk_diving`\tINTEGER,\n\t`gk_handling`\tINTEGER,\n\t`gk_kicking`\tINTEGER,\n\t`gk_positioning`\tINTEGER,\n\t`gk_reflexes`\tINTEGER,\n\tFOREIGN KEY(`player_fifa_api_id`) REFERENCES `Player`(`player_fifa_api_id`),\n\tFOREIGN KEY(`player_api_id`) REFERENCES `Player`(`player_api_id`)\n) \n /* \n 3 example rows: \n SELECT * FROM Player_Attributes LIMIT 3; \n id player_fifa_api_id player_api_id                date overall_rating potential preferred_foot attacking_work_rate defensive_work_rate crossing finishing heading_accuracy short_passing volleys dribbling curve free_kick_accuracy long_passing ball_control acceleration sprint_speed agility reactions balance shot_power jumping stamina strength long_shots aggression interceptions positioning vision penalties marking standing_tackle sliding_tackle gk_diving gk_handling gk_kicking gk_positioning gk_reflexes \n 1             218353        505942 2016-02-18 00:00:00             67        71          right              medium              medium       49        44               71            61      44        51    45                 39           64           49           60           64      59        47      65         55      58      54       76         35         71            70          45     54        48      65              69             69         6          11         10              8           8 \n 2             218353        505942 2015-11-19 00:00:00             67        71          right              medium              medium       49        44               71            61      44        51    45                 39           64           49           60           64      59        47      65         55      58      54       76         35         71            70          45     54        48      65              69             69         6          11         10              8           8 \n 3             218353        505942 2015-09-21 00:00:00             62        66          right              medium              medium       49        44               71            61      44        51    45                 39           64           49           60           64      59        47      65         55      58      54       76         35         63            41          45     54        48      65              66             69         6          11         10              8           8  \n */\n\nCREATE TABLE `Player` (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`player_api_id`\tINTEGER UNIQUE,\n\t`player_name`\tTEXT,\n\t`player_fifa_api_id`\tINTEGER UNIQUE,\n\t`birthday`\tTEXT,\n\t`height`\tINTEGER,\n\t`weight`\tINTEGER\n) \n /* \n 3 example rows: \n SELECT * FROM Player LIMIT 3; \n id player_api_id        player_name player_fifa_api_id            birthday height weight \n 1        505942 Aaron Appindangoye             218353 1992-02-29 00:00:00 182.88    187 \n 2        155782    Aaron Cresswell             189615 1989-12-15 00:00:00 170.18    146 \n 3        162549        Aaron Doran             186170 1991-05-13 00:00:00 170.18    163  \n */\n\nCREATE TABLE `League` (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`country_id`\tINTEGER,\n\t`name`\tTEXT UNIQUE,\n\tFOREIGN KEY(`country_id`) REFERENCES `country`(`id`)\n) \n /* \n 3 example rows: \n SELECT * FROM League LIMIT 3; \n   id country_id                   name \n   1          1 Belgium Jupiler League \n1729       1729 England Premier League \n4769       4769         France Ligue 1  \n */\n\nCREATE TABLE `Country` (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`name`\tTEXT UNIQUE\n) \n /* \n 3 example rows: \n SELECT * FROM Country LIMIT 3; \n   id    name \n   1 Belgium \n1729 England \n4769  France  \n */\n\nCREATE TABLE \"Team\" (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`team_api_id`\tINTEGER UNIQUE,\n\t`team_fifa_api_id`\tINTEGER,\n\t`team_long_name`\tTEXT,\n\t`team_short_name`\tTEXT\n) \n /* \n 3 example rows: \n SELECT * FROM Team LIMIT 3; \n id team_api_id team_fifa_api_id   team_long_name team_short_name \n 1        9987              673         KRC Genk             GEN \n 2        9993              675     Beerschot AC             BAC \n 3       10000            15005 SV Zulte-Waregem             ZUL  \n */\n\nCREATE TABLE `Team_Attributes` (\n\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t`team_fifa_api_id`\tINTEGER,\n\t`team_api_id`\tINTEGER,\n\t`date`\tTEXT,\n\t`buildUpPlaySpeed`\tINTEGER,\n\t`buildUpPlaySpeedClass`\tTEXT,\n\t`buildUpPlayDribbling`\tINTEGER,\n\t`buildUpPlayDribblingClass`\tTEXT,\n\t`buildUpPlayPassing`\tINTEGER,\n\t`buildUpPlayPassingClass`\tTEXT,\n\t`buildUpPlayPositioningClass`\tTEXT,\n\t`chanceCreationPassing`\tINTEGER,\n\t`chanceCreationPassingClass`\tTEXT,\n\t`chanceCreationCrossing`\tINTEGER,\n\t`chanceCreationCrossingClass`\tTEXT,\n\t`chanceCreationShooting`\tINTEGER,\n\t`chanceCreationShootingClass`\tTEXT,\n\t`chanceCreationPositioningClass`\tTEXT,\n\t`defencePressure`\tINTEGER,\n\t`defencePressureClass`\tTEXT,\n\t`defenceAggression`\tINTEGER,\n\t`defenceAggressionClass`\tTEXT,\n\t`defenceTeamWidth`\tINTEGER,\n\t`defenceTeamWidthClass`\tTEXT,\n\t`defenceDefenderLineClass`\tTEXT,\n\tFOREIGN KEY(`team_fifa_api_id`) REFERENCES `Team`(`team_fifa_api_id`),\n\tFOREIGN KEY(`team_api_id`) REFERENCES `Team`(`team_api_id`)\n) \n /* \n 3 example rows: \n SELECT * FROM Team_Attributes LIMIT 3; \n id team_fifa_api_id team_api_id                date buildUpPlaySpeed buildUpPlaySpeedClass buildUpPlayDribbling buildUpPlayDribblingClass buildUpPlayPassing buildUpPlayPassingClass buildUpPlayPositioningClass chanceCreationPassing chanceCreationPassingClass chanceCreationCrossing chanceCreationCrossingClass chanceCreationShooting chanceCreationShootingClass chanceCreationPositioningClass defencePressure defencePressureClass defenceAggression defenceAggressionClass defenceTeamWidth defenceTeamWidthClass defenceDefenderLineClass \n 1              434        9930 2010-02-22 00:00:00               60              Balanced                 None                    Little                 50                   Mixed                   Organised                    60                     Normal                     65                      Normal                     55                      Normal                      Organised              50               Medium                55                  Press               45                Normal                    Cover \n 2              434        9930 2014-09-19 00:00:00               52              Balanced                   48                    Normal                 56                   Mixed                   Organised                    54                     Normal                     63                      Normal                     64                      Normal                      Organised              47               Medium                44                  Press               54                Normal                    Cover \n 3              434        9930 2015-09-10 00:00:00               47              Balanced                   41                    Normal                 54                   Mixed                   Organised                    54                     Normal                     63                      Normal                     64                      Normal                      Organised              47               Medium                44                  Press               54                Normal                    Cover  \n */\n\nCREATE TABLE \"Match\"\n(\n    id               INTEGER\n        primary key autoincrement,\n    country_id       INTEGER\n        references Country,\n    league_id        INTEGER\n        references League,\n    season           TEXT,\n    stage            INTEGER,\n    date             TEXT,\n    match_api_id     INTEGER\n        unique,\n    home_team_api_id INTEGER\n        references Team (team_api_id),\n    away_team_api_id INTEGER\n        references Team (team_api_id),\n    home_team_goal   INTEGER,\n    away_team_goal   INTEGER,\n    home_player_X1   INTEGER,\n    home_player_X2   INTEGER,\n    home_player_X3   INTEGER,\n    home_player_X4   INTEGER,\n    home_player_X5   INTEGER,\n    home_player_X6   INTEGER,\n    home_player_X7   INTEGER,\n    home_player_X8   INTEGER,\n    home_player_X9   INTEGER,\n    home_player_X10  INTEGER,\n    home_player_X11  INTEGER,\n    away_player_X1   INTEGER,\n    away_player_X2   INTEGER,\n    away_player_X3   INTEGER,\n    away_player_X4   INTEGER,\n    away_player_X5   INTEGER,\n    away_player_X6   INTEGER,\n    away_player_X7   INTEGER,\n    away_player_X8   INTEGER,\n    away_player_X9   INTEGER,\n    away_player_X10  INTEGER,\n    away_player_X11  INTEGER,\n    home_player_Y1   INTEGER,\n    home_player_Y2   INTEGER,\n    home_player_Y3   INTEGER,\n    home_player_Y4   INTEGER,\n    home_player_Y5   INTEGER,\n    home_player_Y6   INTEGER,\n    home_player_Y7   INTEGER,\n    home_player_Y8   INTEGER,\n    home_player_Y9   INTEGER,\n    home_player_Y10  INTEGER,\n    home_player_Y11  INTEGER,\n    away_player_Y1   INTEGER,\n    away_player_Y2   INTEGER,\n    away_player_Y3   INTEGER,\n    away_player_Y4   INTEGER,\n    away_player_Y5   INTEGER,\n    away_player_Y6   INTEGER,\n    away_player_Y7   INTEGER,\n    away_player_Y8   INTEGER,\n    away_player_Y9   INTEGER,\n    away_player_Y10  INTEGER,\n    away_player_Y11  INTEGER,\n    home_player_1    INTEGER\n        references Player (player_api_id),\n    home_player_2    INTEGER\n        references Player (player_api_id),\n    home_player_3    INTEGER\n        references Player (player_api_id),\n    home_player_4    INTEGER\n        references Player (player_api_id),\n    home_player_5    INTEGER\n        references Player (player_api_id),\n    home_player_6    INTEGER\n        references Player (player_api_id),\n    home_player_7    INTEGER\n        references Player (player_api_id),\n    home_player_8    INTEGER\n        references Player (player_api_id),\n    home_player_9    INTEGER\n        references Player (player_api_id),\n    home_player_10   INTEGER\n        references Player (player_api_id),\n    home_player_11   INTEGER\n        references Player (player_api_id),\n    away_player_1    INTEGER\n        references Player (player_api_id),\n    away_player_2    INTEGER\n        references Player (player_api_id),\n    away_player_3    INTEGER\n        references Player (player_api_id),\n    away_player_4    INTEGER\n        references Player (player_api_id),\n    away_player_5    INTEGER\n        references Player (player_api_id),\n    away_player_6    INTEGER\n        references Player (player_api_id),\n    away_player_7    INTEGER\n        references Player (player_api_id),\n    away_player_8    INTEGER\n        references Player (player_api_id),\n    away_player_9    INTEGER\n        references Player (player_api_id),\n    away_player_10   INTEGER\n        references Player (player_api_id),\n    away_player_11   INTEGER\n        references Player (player_api_id),\n    goal             TEXT,\n    shoton           TEXT,\n    shotoff          TEXT,\n    foulcommit       TEXT,\n    card             TEXT,\n    \"cross\"          TEXT,\n    corner           TEXT,\n    possession       TEXT,\n    B365H            REAL,\n    B365D            REAL,\n    B365A            REAL,\n    BWH              REAL,\n    BWD              REAL,\n    BWA              REAL,\n    IWH              REAL,\n    IWD              REAL,\n    IWA              REAL,\n    LBH              REAL,\n    LBD              REAL,\n    LBA              REAL,\n    PSH              REAL,\n    PSD              REAL,\n    PSA              REAL,\n    WHH              REAL,\n    WHD              REAL,\n    WHA              REAL,\n    SJH              REAL,\n    SJD              REAL,\n    SJA              REAL,\n    VCH              REAL,\n    VCD              REAL,\n    VCA              REAL,\n    GBH              REAL,\n    GBD              REAL,\n    GBA              REAL,\n    BSH              REAL,\n    BSD              REAL,\n    BSA              REAL\n) \n /* \n 3 example rows: \n SELECT * FROM Match LIMIT 3; \n id country_id league_id    season stage                date match_api_id home_team_api_id away_team_api_id home_team_goal away_team_goal home_player_X1 home_player_X2 home_player_X3 home_player_X4 home_player_X5 home_player_X6 home_player_X7 home_player_X8 home_player_X9 home_player_X10 home_player_X11 away_player_X1 away_player_X2 away_player_X3 away_player_X4 away_player_X5 away_player_X6 away_player_X7 away_player_X8 away_player_X9 away_player_X10 away_player_X11 home_player_Y1 home_player_Y2 home_player_Y3 home_player_Y4 home_player_Y5 home_player_Y6 home_player_Y7 home_player_Y8 home_player_Y9 home_player_Y10 home_player_Y11 away_player_Y1 away_player_Y2 away_player_Y3 away_player_Y4 away_player_Y5 away_player_Y6 away_player_Y7 away_player_Y8 away_player_Y9 away_player_Y10 away_player_Y11 home_player_1 home_player_2 home_player_3 home_player_4 home_player_5 home_player_6 home_player_7 home_player_8 home_player_9 home_player_10 home_player_11 away_player_1 away_player_2 away_player_3 away_player_4 away_player_5 away_player_6 away_player_7 away_player_8 away_player_9 away_player_10 away_player_11 goal shoton shotoff foulcommit card cross corner possession B365H B365D B365A  BWH  BWD  BWA  IWH IWD IWA LBH LBD  LBA  PSH  PSD  PSA  WHH  WHD  WHA  SJH SJD SJA  VCH  VCD  VCA  GBH  GBD  GBA  BSH  BSD  BSA \n 1          1         1 2008/2009     1 2008-08-17 00:00:00       492473             9987             9993              1              1           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None          None          None          None          None          None          None          None          None          None           None           None          None          None          None          None          None          None          None          None          None           None           None None   None    None       None None  None   None       None  1.73   3.4   5.0 1.75 3.35  4.2 1.85 3.2 3.5 1.8 3.3 3.75 None None None  1.7  3.3 4.33  1.9 3.3 4.0 1.65  3.4  4.5 1.78 3.25  4.0 1.73  3.4  4.2 \n 2          1         1 2008/2009     1 2008-08-16 00:00:00       492474            10000             9994              0              0           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None          None          None          None          None          None          None          None          None          None           None           None          None          None          None          None          None          None          None          None          None           None           None None   None    None       None None  None   None       None  1.95   3.2   3.6  1.8  3.3 3.95  1.9 3.2 3.5 1.9 3.2  3.5 None None None 1.83  3.3  3.6 1.95 3.3 3.8  2.0 3.25 3.25 1.85 3.25 3.75 1.91 3.25  3.6 \n 3          1         1 2008/2009     1 2008-08-16 00:00:00       492475             9984             8635              0              3           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None           None           None           None           None           None           None           None           None           None            None            None          None          None          None          None          None          None          None          None          None           None           None          None          None          None          None          None          None          None          None          None           None           None None   None    None       None None  None   None       None  2.38   3.3  2.75  2.4  3.3 2.55  2.6 3.1 2.3 2.5 3.2  2.5 None None None  2.5 3.25  2.4 2.63 3.3 2.5 2.35 3.25 2.65  2.5  3.2  2.5  2.3  3.2 2.75  \n */",
  "thrombosis_prediction": "CREATE TABLE Examination\n(\n    ID                 INTEGER          null,\n    `Examination Date` DATE         null,\n    `aCL IgG`          REAL        null,\n    `aCL IgM`          REAL        null,\n    ANA                INTEGER          null,\n    `ANA Pattern`      TEXT null,\n    `aCL IgA`          INTEGER          null,\n    Diagnosis          TEXT null,\n    KCT                TEXT null,\n    RVVT              TEXT null,\n    LAC                TEXT null,\n    Symptoms           TEXT null,\n    Thrombosis         INTEGER          null,\n    foreign key (ID) references Patient (ID)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM Examination LIMIT 3; \n     ID Examination Date aCL IgG aCL IgM ANA ANA Pattern aCL IgA Diagnosis  KCT RVVT  LAC Symptoms Thrombosis \n 14872       1997-05-27     1.3     1.6 256           P       0 MCTD, AMI None None    -      AMI          1 \n 48473       1992-12-21     4.3     4.6 256         P,S       3       SLE    -    -    -     None          0 \n102490       1995-04-20     2.3     2.5   0        None       4       PSS None None None     None          0  \n */\n\nCREATE TABLE Patient\n(\n    ID           INTEGER default 0 not null\n        primary key,\n    SEX          TEXT  null,\n    Birthday     DATE          null,\n    Description  DATE          null,\n    `First Date` DATE          null,\n    Admission    TEXT  null,\n    Diagnosis    TEXT  null\n) \n /* \n 3 example rows: \n SELECT * FROM Patient LIMIT 3; \n    ID SEX   Birthday Description First Date Admission Diagnosis \n 2110   F 1934-02-13  1994-02-14 1993-02-10         +  RA susp. \n11408   F 1937-05-02  1996-12-01 1973-01-01         +       PSS \n12052   F 1956-04-14  1991-08-13       None         +       SLE  \n */\n\nCREATE TABLE Laboratory\n(\n    ID        INTEGER  default 0            not null,\n    Date      DATE default '0000-00-00' not null,\n    GOT       INTEGER                       null,\n    GPT       INTEGER                        null,\n    LDH       INTEGER                        null,\n    ALP       INTEGER                        null,\n    TP        REAL             null,\n    ALB       REAL             null,\n    UA        REAL             null,\n    UN        INTEGER                       null,\n    CRE       REAL             null,\n    `T-BIL`   REAL             null,\n    `T-CHO`   INTEGER                       null,\n    TG        INTEGER                       null,\n    CPK       INTEGER                       null,\n    GLU       INTEGER                       null,\n    WBC       REAL             null,\n    RBC       REAL             null,\n    HGB       REAL             null,\n    HCT       REAL             null,\n    PLT       INTEGER                       null,\n    PT        REAL             null,\n    APTT      INTEGER                       null,\n    FG        REAL             null,\n    PIC       INTEGER                       null,\n    TAT       INTEGER                       null,\n    TAT2      INTEGER                       null,\n    `U-PRO`   TEXT              null,\n    IGG       INTEGER                       null,\n    IGA       INTEGER                       null,\n    IGM       INTEGER                       null,\n    CRP       TEXT              null,\n    RA        TEXT              null,\n    RF        TEXT              null,\n    C3        INTEGER                       null,\n    C4        INTEGER                       null,\n    RNP       TEXT              null,\n    SM        TEXT              null,\n    SC170     TEXT              null,\n    SSA       TEXT              null,\n    SSB       TEXT              null,\n    CENTROMEA TEXT              null,\n    DNA       TEXT              null,\n    `DNA-II`  INTEGER                       null,\n    primary key (ID, Date),\n        foreign key (ID) references Patient (ID)\n            on update cascade on delete cascade\n) \n /* \n 3 example rows: \n SELECT * FROM Laboratory LIMIT 3; \n    ID       Date GOT GPT LDH ALP  TP ALB  UA UN CRE T-BIL T-CHO   TG  CPK  GLU  WBC RBC HGB  HCT PLT   PT APTT   FG  PIC  TAT TAT2 U-PRO  IGG  IGA  IGM CRP   RA   RF   C3   C4  RNP   SM SC170  SSA  SSB CENTROMEA  DNA DNA-II \n27654 1991-09-11  34  36 567 166 4.5 3.3 3.8 29 0.8   0.3   165 None    9 None  5.0 2.6 6.4 20.3 227 None None None None None None  None  339  145   46 0.6 None None None None None None  None None None      None None   None \n27654 1991-09-17  29  31 579 154 5.1 3.4 4.2 36 0.8  None  None None None None 10.4 2.9 6.7 21.6 242 None None None None None None  None  771  188  132 0.6 None None None None None None  None None None      None None   None \n27654 1991-09-19  26  22 684 138 5.5 3.6 4.9 34 0.9  None  None None None   88 10.5 3.4 7.9 24.7 233 None None None None None None  None None None None 2.7 None None None None None None  None None None      None None   None  \n */",
  "student_club": "CREATE TABLE event\n(\n    event_id   TEXT\n        constraint event_pk\n            primary key,\n    event_name TEXT,\n    event_date TEXT,\n    type       TEXT,\n    notes      TEXT,\n    location   TEXT,\n    status     TEXT\n) \n /* \n 3 example rows: \n SELECT * FROM event LIMIT 3; \n          event_id                 event_name          event_date     type                                                         notes location status \nrec0Si5cQ4rJRVzd6              March Meeting 2020-03-10T12:00:00  Meeting                                                          None   MU 215   Open \nrec0akZnLLpGUloLH Officers meeting - January 2020-01-14T09:30:00  Meeting                                                          None     None   Open \nrec0dZPcWXF0QjNnE           Spring Elections 2019-11-24T09:00:00 Election All active members can vote for new officers between 4pm-8pm.   MU 215   Open  \n */\n\nCREATE TABLE major\n(\n    major_id   TEXT\n        constraint major_pk\n            primary key,\n    major_name TEXT,\n    department TEXT,\n    college    TEXT\n) \n /* \n 3 example rows: \n SELECT * FROM major LIMIT 3; \n          major_id                             major_name                                           department                                     college \nrec06DF6vZ1CyPKpc Outdoor Product Design and Development School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences \nrec09LedkREyskCNv             Agricultural Communication School of Applied Sciences, Technology and Education College of Agriculture and Applied Sciences \nrec0Eanv576RhQllI         Fisheries and Aquatic Sciences                        Watershed Sciences Department                College of Natural Resources  \n */\n\nCREATE TABLE zip_code\n(\n    zip_code    INTEGER\n        constraint zip_code_pk\n            primary key,\n    type        TEXT,\n    city        TEXT,\n    county      TEXT,\n    state       TEXT,\n    short_state TEXT\n) \n /* \n 3 example rows: \n SELECT * FROM zip_code LIMIT 3; \n zip_code     type       city             county       state short_state \n     501   Unique Holtsville     Suffolk County    New York          NY \n     544   Unique Holtsville     Suffolk County    New York          NY \n     601 Standard   Adjuntas Adjuntas Municipio Puerto Rico          PR  \n */\n\nCREATE TABLE \"attendance\"\n(\n    link_to_event  TEXT,\n    link_to_member TEXT,\n    primary key (link_to_event, link_to_member),\n    foreign key (link_to_event) references event(event_id),\n    foreign key (link_to_member) references member(member_id)\n) \n /* \n 3 example rows: \n SELECT * FROM attendance LIMIT 3; \n     link_to_event    link_to_member \nrec2N69DMcrqN9PJC recD078PnS3x2doBe \nrec2N69DMcrqN9PJC recP6DJPyi5donvXL \nrec2N69DMcrqN9PJC rec28ORZgcm1dtqBZ  \n */\n\nCREATE TABLE \"budget\"\n(\n    budget_id     TEXT\n            primary key,\n    category      TEXT,\n    spent         REAL,\n    remaining     REAL,\n    amount        INTEGER,\n    event_status  TEXT,\n    link_to_event TEXT,\n    foreign key (link_to_event) references event(event_id)\n) \n /* \n 3 example rows: \n SELECT * FROM budget LIMIT 3; \n         budget_id      category  spent          remaining amount event_status     link_to_event \nrec0QmEc3cSQFQ6V2 Advertisement  67.81               7.19     75       Closed recI43CzsZ0Q625ma \nrec1bG6HSft7XIvTP          Food 121.14              28.86    150       Closed recggMW2eyCYceNcy \nrec1z6ISJU2HdIsVm          Food   20.2 -0.199999999999999     20       Closed recJ4Witp9tpjaugn  \n */\n\nCREATE TABLE \"expense\"\n(\n    expense_id          TEXT\n            primary key,\n    expense_description TEXT,\n    expense_date        TEXT,\n    cost                REAL,\n    approved            TEXT,\n    link_to_member      TEXT,\n    link_to_budget      TEXT,\n    foreign key (link_to_budget) references budget(budget_id),\n    foreign key (link_to_member) references member(member_id)\n) \n /* \n 3 example rows: \n SELECT * FROM expense LIMIT 3; \n        expense_id expense_description expense_date   cost approved    link_to_member    link_to_budget \nrec017x6R3hQqkLAo Post Cards, Posters   2019-08-20 122.06     true rec4BLdZHS2Blfp4v recvKTAWAFKkVNnXQ \nrec1nIjoZKTYayqZ6      Water, Cookies   2019-10-08   20.2     true recro8T1MPMwRadVH recy8KY5bUdzF81vv \nrec1oMgNFt7Y0G40x               Pizza   2019-09-10  51.81     true recD078PnS3x2doBe recwXIiKoBMjXJsGZ  \n */\n\nCREATE TABLE \"income\"\n(\n    income_id      TEXT\n        constraint income_pk\n            primary key,\n    date_received  TEXT,\n    amount         INTEGER,\n    source         TEXT,\n    notes          TEXT,\n    link_to_member TEXT,\n    foreign key (link_to_member) references member(member_id)\n) \n /* \n 3 example rows: \n SELECT * FROM income LIMIT 3; \n         income_id date_received amount source notes    link_to_member \nrec0s9ZrO15zhzUeE    2019-10-17     50   Dues  None reccW7q1KkhSKZsea \nrec7f5XMQZexgtQJo    2019-09-04     50   Dues  None recTjHY5xXhvkCdVT \nrec8BUJa8GXUjiglg    2019-10-08     50   Dues  None recUdRhbhcEO1Hk5r  \n */\n\nCREATE TABLE \"member\"\n(\n    member_id     TEXT\n        constraint member_pk\n            primary key,\n    first_name    TEXT,\n    last_name     TEXT,\n    email         TEXT,\n    position      TEXT,\n    t_shirt_size  TEXT,\n    phone         TEXT,\n    zip           INTEGER,\n    link_to_major TEXT,\n    foreign key (link_to_major) references major(major_id),\n    foreign key (zip) references zip_code(zip_code)\n) \n /* \n 3 example rows: \n SELECT * FROM member LIMIT 3; \n         member_id first_name last_name                  email position t_shirt_size          phone   zip     link_to_major \nrec1x5zBFIqoOuPW8     Angela   Sanders angela.sanders@lpu.edu   Member       Medium (651) 928-4507 55108 recxK3MHQFbR9J5uO \nrec280Sk7o31iG0Tx      Grant   Gilmour  grant.gilmour@lpu.edu   Member      X-Large   403-555-1310 29440 rec7BxKpjJ7bNph3O \nrec28ORZgcm1dtqBZ      Luisa     Guidi    luisa.guidi@lpu.edu   Member       Medium   442-555-5882 10002 recdIBgeU38UbV2sy  \n */",
  "debit_card_specializing": "CREATE TABLE customers\n(\n    CustomerID INTEGER UNIQUE     not null\n        primary key,\n    Segment    TEXT null,\n    Currency   TEXT null\n) \n /* \n 3 example rows: \n SELECT * FROM customers LIMIT 3; \n CustomerID Segment Currency \n         3     SME      EUR \n         5     LAM      EUR \n         6     SME      EUR  \n */\n\nCREATE TABLE gasstations\n(\n    GasStationID INTEGER    UNIQUE   not null\n        primary key,\n    ChainID      INTEGER          null,\n    Country      TEXT null,\n    Segment      TEXT null\n) \n /* \n 3 example rows: \n SELECT * FROM gasstations LIMIT 3; \n GasStationID ChainID Country         Segment \n          44      13     CZE Value for money \n          45       6     CZE         Premium \n          46      23     CZE           Other  \n */\n\nCREATE TABLE products\n(\n    ProductID   INTEGER   UNIQUE      not null\n        primary key,\n    Description TEXT null\n) \n /* \n 3 example rows: \n SELECT * FROM products LIMIT 3; \n ProductID  Description \n        1 Rucní zadání \n        2        Nafta \n        3      Special  \n */\n\nCREATE TABLE \"transactions_1k\"\n(\n    TransactionID INTEGER\n        primary key autoincrement,\n    Date          DATE,\n    Time          TEXT,\n    CustomerID    INTEGER,\n    CardID        INTEGER,\n    GasStationID  INTEGER,\n    ProductID     INTEGER,\n    Amount        INTEGER,\n    Price         REAL\n) \n /* \n 3 example rows: \n SELECT * FROM transactions_1k LIMIT 3; \n TransactionID       Date     Time CustomerID CardID GasStationID ProductID Amount  Price \n            1 2012-08-24 09:41:00      31543 486621         3704         2     28 672.64 \n            2 2012-08-24 10:03:00      46707 550134         3704         2     18 430.72 \n            3 2012-08-24 10:03:00      46707 550134         3704        23      1 121.99  \n */\n\nCREATE TABLE sqlite_sequence(name,seq) \n /* \n 3 example rows: \n SELECT * FROM sqlite_sequence LIMIT 3; \n            name  seq \ntransactions_1k 1000  \n */\n\nCREATE TABLE \"yearmonth\"\n(\n    CustomerID  INTEGER not null\n        references customers\n            on update cascade on delete cascade\n        references customers,\n    Date        TEXT    not null,\n    Consumption REAL,\n    primary key (Date, CustomerID)\n) \n /* \n 3 example rows: \n SELECT * FROM yearmonth LIMIT 3; \n CustomerID   Date Consumption \n         5 201207       528.3 \n         5 201302     1598.28 \n         5 201303     1931.36  \n */"
}
